# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `squasher` gem.
# Please instead update this file by running `bin/tapioca gem squasher`.


# source://squasher//lib/squasher.rb#1
module Squasher
  extend ::Squasher

  # source://squasher//lib/squasher.rb#36
  def ask(*args); end

  # source://squasher//lib/squasher.rb#24
  def clean; end

  # Returns the value of attribute config.
  #
  # source://squasher//lib/squasher.rb#10
  def config; end

  # source://squasher//lib/squasher.rb#52
  def error(*args); end

  # source://squasher//lib/squasher.rb#48
  def print(message, options = T.unsafe(nil)); end

  # source://squasher//lib/squasher.rb#28
  def rake(command, description = T.unsafe(nil)); end

  # source://squasher//lib/squasher.rb#14
  def setup(options); end

  # source://squasher//lib/squasher.rb#18
  def squash(raw_date); end

  # source://squasher//lib/squasher.rb#41
  def tell(key, options = T.unsafe(nil)); end

  private

  # source://squasher//lib/squasher.rb#69
  def colorize(message); end

  # source://squasher//lib/squasher.rb#59
  def messages; end
end

# source://squasher//lib/squasher.rb#67
Squasher::COLORS = T.let(T.unsafe(nil), Hash)

# source://squasher//lib/squasher/cleaner.rb#4
class Squasher::Cleaner
  # source://squasher//lib/squasher/cleaner.rb#11
  def process; end

  private

  # source://squasher//lib/squasher/cleaner.rb#26
  def config; end

  # source://squasher//lib/squasher/cleaner.rb#38
  def now_timestamp; end

  # source://squasher//lib/squasher/cleaner.rb#30
  def prev_migration; end

  class << self
    # source://squasher//lib/squasher/cleaner.rb#7
    def process(*args); end
  end
end

# source://squasher//lib/squasher/cleaner.rb#5
Squasher::Cleaner::MIGRATION_NAME = T.let(T.unsafe(nil), String)

# source://squasher//lib/squasher/config.rb#6
class Squasher::Config
  # @return [Config] a new instance of Config
  #
  # source://squasher//lib/squasher/config.rb#38
  def initialize; end

  # @return [Boolean]
  #
  # source://squasher//lib/squasher/config.rb#84
  def dbconfig?; end

  # source://squasher//lib/squasher/config.rb#108
  def in_app_root(&block); end

  # source://squasher//lib/squasher/config.rb#76
  def migration_file(timestamp, migration_name); end

  # source://squasher//lib/squasher/config.rb#72
  def migration_files; end

  # Returns the value of attribute migration_version.
  #
  # source://squasher//lib/squasher/config.rb#36
  def migration_version; end

  # @return [Boolean]
  #
  # source://squasher//lib/squasher/config.rb#80
  def migrations_folder?; end

  # Returns the value of attribute schema_file.
  #
  # source://squasher//lib/squasher/config.rb#36
  def schema_file; end

  # source://squasher//lib/squasher/config.rb#45
  def set(key, value); end

  # @return [Boolean]
  #
  # source://squasher//lib/squasher/config.rb#68
  def set?(k); end

  # source://squasher//lib/squasher/config.rb#88
  def stub_dbconfig; end

  private

  # source://squasher//lib/squasher/config.rb#116
  def dbconfig; end

  # Returns the value of attribute dbconfig_file.
  #
  # source://squasher//lib/squasher/config.rb#114
  def dbconfig_file; end

  # Returns the value of attribute migrations_folder.
  #
  # source://squasher//lib/squasher/config.rb#114
  def migrations_folder; end

  # source://squasher//lib/squasher/config.rb#136
  def set_app_path(path); end
end

# source://squasher//lib/squasher/config.rb#7
module Squasher::Config::Render
  extend ::Squasher::Config::Render

  # source://squasher//lib/squasher/config.rb#22
  def const_missing(*args); end

  # source://squasher//lib/squasher/config.rb#31
  def inspect; end

  # source://squasher//lib/squasher/config.rb#17
  def method_missing(*args); end

  # source://squasher//lib/squasher/config.rb#10
  def process(path); end

  # source://squasher//lib/squasher/config.rb#27
  def to_s; end
end

# source://squasher//lib/squasher/render.rb#4
class Squasher::Render
  # @return [Render] a new instance of Render
  #
  # source://squasher//lib/squasher/render.rb#11
  def initialize(name, config); end

  # Returns the value of attribute config.
  #
  # source://squasher//lib/squasher/render.rb#9
  def config; end

  # source://squasher//lib/squasher/render.rb#20
  def each_schema_line(&block); end

  # Returns the value of attribute name.
  #
  # source://squasher//lib/squasher/render.rb#9
  def name; end

  # source://squasher//lib/squasher/render.rb#16
  def render; end

  private

  # source://squasher//lib/squasher/render.rb#49
  def stream_schema(stream); end

  # @yield ['execute %q{']
  #
  # source://squasher//lib/squasher/render.rb#32
  def stream_structure(stream); end

  # source://squasher//lib/squasher/render.rb#67
  def template(name); end

  class << self
    # source://squasher//lib/squasher/render.rb#5
    def render(*args); end
  end
end

# source://squasher//lib/squasher/version.rb#2
Squasher::VERSION = T.let(T.unsafe(nil), String)

# source://squasher//lib/squasher/worker.rb#4
class Squasher::Worker
  # @return [Worker] a new instance of Worker
  #
  # source://squasher//lib/squasher/worker.rb#11
  def initialize(date); end

  # Returns the value of attribute date.
  #
  # source://squasher//lib/squasher/worker.rb#5
  def date; end

  # source://squasher//lib/squasher/worker.rb#15
  def process; end

  private

  # @return [Boolean]
  #
  # source://squasher//lib/squasher/worker.rb#57
  def before_date?(timestamp); end

  # source://squasher//lib/squasher/worker.rb#40
  def check!; end

  # source://squasher//lib/squasher/worker.rb#36
  def config; end

  # source://squasher//lib/squasher/worker.rb#63
  def finish_timestamp; end

  # source://squasher//lib/squasher/worker.rb#53
  def get_timestamp(file); end

  # source://squasher//lib/squasher/worker.rb#49
  def migrations; end

  # source://squasher//lib/squasher/worker.rb#67
  def under_squash_env; end

  class << self
    # source://squasher//lib/squasher/worker.rb#7
    def process(*args); end
  end
end
