# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `discord-notifier` gem.
# Please instead update this file by running `bin/tapioca gem discord-notifier`.


# source://discord-notifier//lib/discord_notifier/embed.rb#1
module Discord
  class << self
    # source://discord-notifier//lib/discord_notifier/form_data.rb#6
    def form_data_request(uri, params); end

    # source://discord-notifier//lib/discord_notifier/form_data.rb#13
    def multipart_form_data(config); end
  end
end

# source://discord-notifier//lib/discord_notifier/form_data.rb#4
Discord::BOUNDARY = T.let(T.unsafe(nil), String)

# source://discord-notifier//lib/discord_notifier/backports/hash.rb#2
module Discord::Backports; end

# source://discord-notifier//lib/discord_notifier.rb#12
class Discord::Config < ::Struct
  # Returns the value of attribute avatar_url
  #
  # @return [Object] the current value of avatar_url
  def avatar_url; end

  # Sets the attribute avatar_url
  #
  # @param value [Object] the value to set the attribute avatar_url to.
  # @return [Object] the newly set value
  def avatar_url=(_); end

  # Returns the value of attribute url
  #
  # @return [Object] the current value of url
  def url; end

  # Sets the attribute url
  #
  # @param value [Object] the value to set the attribute url to.
  # @return [Object] the newly set value
  def url=(_); end

  # Returns the value of attribute username
  #
  # @return [Object] the current value of username
  def username; end

  # Sets the attribute username
  #
  # @param value [Object] the value to set the attribute username to.
  # @return [Object] the newly set value
  def username=(_); end

  # Returns the value of attribute wait
  #
  # @return [Object] the current value of wait
  def wait; end

  # Sets the attribute wait
  #
  # @param value [Object] the value to set the attribute wait to.
  # @return [Object] the newly set value
  def wait=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://discord-notifier//lib/discord_notifier/embed.rb#2
class Discord::Embed
  # @return [Embed] a new instance of Embed
  #
  # source://discord-notifier//lib/discord_notifier/embed.rb#5
  def initialize(&block); end

  # @raise [ArgumentError]
  #
  # source://discord-notifier//lib/discord_notifier/embed.rb#78
  def add_field(params); end

  # @raise [ArgumentError]
  #
  # source://discord-notifier//lib/discord_notifier/embed.rb#66
  def author(params); end

  # source://discord-notifier//lib/discord_notifier/embed.rb#30
  def color(val); end

  # Returns the value of attribute data.
  #
  # source://discord-notifier//lib/discord_notifier/embed.rb#3
  def data; end

  # @raise [ArgumentError]
  #
  # source://discord-notifier//lib/discord_notifier/embed.rb#15
  def description(str); end

  # @raise [ArgumentError]
  #
  # source://discord-notifier//lib/discord_notifier/embed.rb#78
  def field(params); end

  # @raise [ArgumentError]
  #
  # source://discord-notifier//lib/discord_notifier/embed.rb#72
  def footer(params); end

  # @raise [ArgumentError]
  #
  # source://discord-notifier//lib/discord_notifier/embed.rb#54
  def image(params); end

  # @raise [ArgumentError]
  #
  # source://discord-notifier//lib/discord_notifier/embed.rb#60
  def provider(params); end

  # @raise [ArgumentError]
  #
  # source://discord-notifier//lib/discord_notifier/embed.rb#42
  def thumbnail(params); end

  # @raise [ArgumentError]
  #
  # source://discord-notifier//lib/discord_notifier/embed.rb#25
  def timestamp(date); end

  # @raise [ArgumentError]
  #
  # source://discord-notifier//lib/discord_notifier/embed.rb#10
  def title(str); end

  # @raise [ArgumentError]
  #
  # source://discord-notifier//lib/discord_notifier/embed.rb#20
  def url(str); end

  # @raise [ArgumentError]
  #
  # source://discord-notifier//lib/discord_notifier/embed.rb#48
  def video(params); end
end

# source://discord-notifier//lib/discord_notifier.rb#14
module Discord::Notifier
  class << self
    # source://discord-notifier//lib/discord_notifier.rb#66
    def endpoint(config); end

    # source://discord-notifier//lib/discord_notifier.rb#21
    def message(content, config = T.unsafe(nil)); end

    # source://discord-notifier//lib/discord_notifier.rb#31
    def payload(content, config); end

    # source://discord-notifier//lib/discord_notifier.rb#56
    def send_form(params); end

    # source://discord-notifier//lib/discord_notifier.rb#50
    def send_request(params); end

    # @yield [@@config]
    #
    # source://discord-notifier//lib/discord_notifier.rb#17
    def setup; end
  end
end
