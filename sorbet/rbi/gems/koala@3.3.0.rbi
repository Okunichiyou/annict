# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `koala` gem.
# Please instead update this file by running `bin/tapioca gem koala`.


# source://koala//lib/koala/errors.rb#1
module Koala
  class << self
    # Allows you to control various Koala configuration options.
    # NOTE: this is not currently threadsafe.
    # See Koala::Configuration.
    #
    # source://koala//lib/koala.rb#43
    def config; end

    # @yield [config]
    #
    # source://koala//lib/koala.rb#36
    def configure; end

    # Control which HTTP service framework Koala uses.
    # Primarily used to switch between the mock-request framework used in testing
    # and the live framework used in real life (and live testing).
    # In theory, you could write your own HTTPService module if you need different functionality,
    # but since the switch to {https://github.com/arsduo/koala/wiki/HTTP-Services Faraday} almost all such goals can be accomplished with middleware.
    #
    # source://koala//lib/koala.rb#34
    def http_service; end

    # Switch the HTTP service -- mostly used for testing.
    #
    # @private
    #
    # source://koala//lib/koala.rb#55
    def http_service=(service); end

    # An convenenient alias to Koala.http_service.make_request.
    #
    # source://koala//lib/koala.rb#61
    def make_request(path, args, verb, options = T.unsafe(nil)); end

    # Used for testing.
    #
    # source://koala//lib/koala.rb#48
    def reset_config; end
  end
end

# Global configuration for Koala.
#
# source://koala//lib/koala/configuration.rb#2
class Koala::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://koala//lib/koala/configuration.rb#49
  def initialize; end

  # The default access token to be used if none is otherwise supplied.
  #
  # source://koala//lib/koala/configuration.rb#4
  def access_token; end

  # The default access token to be used if none is otherwise supplied.
  #
  # source://koala//lib/koala/configuration.rb#4
  def access_token=(_arg0); end

  # The default API version to use if none is otherwise specified.
  #
  # source://koala//lib/koala/configuration.rb#16
  def api_version; end

  # The default API version to use if none is otherwise specified.
  #
  # source://koala//lib/koala/configuration.rb#16
  def api_version=(_arg0); end

  # The default app access token to be used if none is otherwise supplied.
  #
  # source://koala//lib/koala/configuration.rb#13
  def app_access_token; end

  # The default app access token to be used if none is otherwise supplied.
  #
  # source://koala//lib/koala/configuration.rb#13
  def app_access_token=(_arg0); end

  # The default application ID to use if none is otherwise supplied.
  #
  # source://koala//lib/koala/configuration.rb#10
  def app_id; end

  # The default application ID to use if none is otherwise supplied.
  #
  # source://koala//lib/koala/configuration.rb#10
  def app_id=(_arg0); end

  # The default app secret value to be used if none is otherwise supplied.
  #
  # source://koala//lib/koala/configuration.rb#7
  def app_secret; end

  # The default app secret value to be used if none is otherwise supplied.
  #
  # source://koala//lib/koala/configuration.rb#7
  def app_secret=(_arg0); end

  # Returns the value of attribute beta_replace.
  #
  # source://koala//lib/koala/configuration.rb#47
  def beta_replace; end

  # Sets the attribute beta_replace
  #
  # @param value the value to set the attribute beta_replace to.
  #
  # source://koala//lib/koala/configuration.rb#47
  def beta_replace=(_arg0); end

  # The server to use when constructing dialog URLs.
  #
  # source://koala//lib/koala/configuration.rb#29
  def dialog_host; end

  # The server to use when constructing dialog URLs.
  #
  # source://koala//lib/koala/configuration.rb#29
  def dialog_host=(_arg0); end

  # The server to use for Graph API requests
  #
  # source://koala//lib/koala/configuration.rb#26
  def graph_server; end

  # The server to use for Graph API requests
  #
  # source://koala//lib/koala/configuration.rb#26
  def graph_server=(_arg0); end

  # Certain Facebook services (beta, video) require you to access different
  # servers. If you're using your own servers, for instance, for a proxy,
  # you can change both the matcher (what value to change when updating the URL) and the
  # replacement values (what to add).
  #
  # So, for instance, to use the beta stack, we match on .facebook and change it to .beta.facebook.
  # If you're talking to fbproxy.mycompany.com, you could set up beta.fbproxy.mycompany.com for
  # FB's beta tier, and set the matcher to /\.fbproxy/ and the beta_replace to '.beta.fbproxy'.
  #
  # source://koala//lib/koala/configuration.rb#45
  def host_path_matcher; end

  # Certain Facebook services (beta, video) require you to access different
  # servers. If you're using your own servers, for instance, for a proxy,
  # you can change both the matcher (what value to change when updating the URL) and the
  # replacement values (what to add).
  #
  # So, for instance, to use the beta stack, we match on .facebook and change it to .beta.facebook.
  # If you're talking to fbproxy.mycompany.com, you could set up beta.fbproxy.mycompany.com for
  # FB's beta tier, and set the matcher to /\.fbproxy/ and the beta_replace to '.beta.fbproxy'.
  #
  # source://koala//lib/koala/configuration.rb#45
  def host_path_matcher=(_arg0); end

  # Whether or not to mask tokens
  #
  # source://koala//lib/koala/configuration.rb#32
  def mask_tokens; end

  # Whether or not to mask tokens
  #
  # source://koala//lib/koala/configuration.rb#32
  def mask_tokens=(_arg0); end

  # The default value to use for the oauth_callback_url if no other is provided.
  #
  # source://koala//lib/koala/configuration.rb#19
  def oauth_callback_url; end

  # The default value to use for the oauth_callback_url if no other is provided.
  #
  # source://koala//lib/koala/configuration.rb#19
  def oauth_callback_url=(_arg0); end

  # Whether to preserve arrays in arguments, which are expected by certain FB APIs (see the ads API
  # in particular, https://developers.facebook.com/docs/marketing-api/adgroup/v2.4)
  #
  # source://koala//lib/koala/configuration.rb#23
  def preserve_form_arguments; end

  # Whether to preserve arrays in arguments, which are expected by certain FB APIs (see the ads API
  # in particular, https://developers.facebook.com/docs/marketing-api/adgroup/v2.4)
  #
  # source://koala//lib/koala/configuration.rb#23
  def preserve_form_arguments=(_arg0); end

  # Called with the info for the rate limits in the response header
  #
  # source://koala//lib/koala/configuration.rb#35
  def rate_limit_hook; end

  # Called with the info for the rate limits in the response header
  #
  # source://koala//lib/koala/configuration.rb#35
  def rate_limit_hook=(_arg0); end

  # Returns the value of attribute video_replace.
  #
  # source://koala//lib/koala/configuration.rb#46
  def video_replace; end

  # Sets the attribute video_replace
  #
  # @param value the value to set the attribute video_replace to.
  #
  # source://koala//lib/koala/configuration.rb#46
  def video_replace=(_arg0); end
end

# source://koala//lib/koala/errors.rb#5
module Koala::Facebook; end

# source://koala//lib/koala/api/graph_collection.rb#5
class Koala::Facebook::API
  include ::Koala::Facebook::GraphAPIMethods

  # Creates a new API client.
  #
  # @note If no access token is provided, you can only access some public information.
  # @param access_token [String] access token
  # @param app_secret [String] app secret, for tying your access tokens to your app secret
  #   If you provide an app secret, your requests will be
  #   signed by default, unless you pass appsecret_proof:
  #   false as an option to the API call. (See
  #   https://developers.facebook.com/docs/graph-api/securing-requests/)
  # @param rate_limit_hook [Block] block called with limits received in facebook response headers
  # @return [Koala::Facebook::API] the API client
  #
  # source://koala//lib/koala/api.rb#19
  def initialize(access_token = T.unsafe(nil), app_secret = T.unsafe(nil), rate_limit_hook = T.unsafe(nil)); end

  # Returns the value of attribute access_token.
  #
  # source://koala//lib/koala/api.rb#25
  def access_token; end

  # Makes a request to the appropriate Facebook API.
  #
  # @note You'll rarely need to call this method directly.
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param path the server path for this request (leading / is prepended if not present)
  # @param args arguments to be sent to Facebook
  # @param verb the HTTP method to use
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @raise [Koala::Facebook::ServerError] if Facebook returns an error (response status >= 500)
  # @return a Koala::HTTPService::Response object representing the returned Facebook data
  # @see GraphAPIMethods#graph_call
  #
  # source://koala//lib/koala/api.rb#101
  def api(path, args = T.unsafe(nil), verb = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute app_secret.
  #
  # source://koala//lib/koala/api.rb#25
  def app_secret; end

  # Make a call directly to the Graph API.
  # (See any of the other methods for example invocations.)
  #
  # @param path the Graph API path to query (no leading / needed)
  # @param verb the type of HTTP request to make (get, post, delete, etc.)
  # @raise [Koala::Facebook::APIError] if Facebook returns an error
  # @return the result from Facebook
  # @yield response when making a batch API call, you can pass in a block
  #   that parses the results, allowing for cleaner code.
  #   The block's return value is returned in the batch results.
  #   See the code for {#get_picture} for examples.
  #   (Not needed in regular calls; you'll probably rarely use this.)
  #
  # source://koala//lib/koala/api.rb#46
  def graph_call(path, args = T.unsafe(nil), verb = T.unsafe(nil), options = T.unsafe(nil), &post_processing); end

  # Returns the value of attribute rate_limit_hook.
  #
  # source://koala//lib/koala/api.rb#25
  def rate_limit_hook; end

  private

  # source://koala//lib/koala/api.rb#155
  def check_response(http_status, body, headers); end

  # @return [Boolean]
  #
  # source://koala//lib/koala/api.rb#151
  def preserve_form_arguments?(options); end

  # Sanitizes Ruby objects into Facebook-compatible string values.
  #
  # Returns a hash in which values that are arrays of non-enumerable values
  #         (Strings, Symbols, Numbers, etc.) are turned into comma-separated strings.
  #
  # @param parameters a hash of parameters.
  #
  # source://koala//lib/koala/api.rb#139
  def sanitize_request_parameters(parameters); end
end

# A light wrapper for collections returned from the Graph API.
# It extends Array to allow you to page backward and forward through
# result sets, and providing easy access to paging information.
#
# source://koala//lib/koala/api/graph_collection.rb#9
class Koala::Facebook::API::GraphCollection < ::Array
  # Initialize the array of results and store various additional paging-related information.
  #
  # @param response [Koala::HTTPService::Response] object wrapping the raw Facebook response
  # @param api the Graph {Koala::Facebook::API API} instance to use to make calls
  #   (usually the API that made the original call).
  # @return [Koala::Facebook::API::GraphCollection] an initialized GraphCollection
  #   whose paging, summary, raw_response, and api attributes are populated.
  #
  # source://koala//lib/koala/api/graph_collection.rb#30
  def initialize(response, api); end

  # @return [Koala::Facebook::GraphAPI] the api used to make requests.
  #
  # source://koala//lib/koala/api/graph_collection.rb#16
  def api; end

  # The headers from the Facebook response
  #
  # source://koala//lib/koala/api/graph_collection.rb#20
  def headers; end

  # Retrieve the next page of results.
  #
  # @example With optional extra params
  #   wall = api.get_connections("me", "feed", since: 1379593891)
  #   wall.next_page(since: 1379593891)
  # @param extra_params [Hash] Some optional extra parameters for paging. For supported parameters see https://developers.facebook.com/docs/reference/api/pagination/
  # @return a GraphCollection array of additional results (an empty array if there are no more results)
  #
  # source://koala//lib/koala/api/graph_collection.rb#65
  def next_page(extra_params = T.unsafe(nil)); end

  # Arguments that can be sent to {Koala::Facebook::API#graph_call} to retrieve the next page of results.
  #
  # @example
  #   @api.graph_call(*collection.next_page_params)
  # @return an array of arguments, or nil if there are no more pages
  #
  # source://koala//lib/koala/api/graph_collection.rb#86
  def next_page_params; end

  # The raw paging information from Facebook (next/previous URLs).
  #
  # source://koala//lib/koala/api/graph_collection.rb#12
  def paging; end

  # @private
  #
  # source://koala//lib/koala/api/graph_collection.rb#101
  def parse_page_url(url); end

  # Retrieve the previous page of results.
  #
  # @param extra_params [Hash] Some optional extra parameters for paging. For supported parameters see https://developers.facebook.com/docs/reference/api/pagination/
  # @return a GraphCollection array of additional results (an empty array if there are no earlier results)
  #
  # source://koala//lib/koala/api/graph_collection.rb#75
  def previous_page(extra_params = T.unsafe(nil)); end

  # Arguments that can be sent to {Koala::Facebook::API#graph_call} to retrieve the previous page of results.
  #
  # @example
  #   @api.graph_call(*collection.previous_page_params)
  # @return an array of arguments, or nil if there are no previous pages
  #
  # source://koala//lib/koala/api/graph_collection.rb#96
  def previous_page_params; end

  # The entire raw response from Facebook.
  #
  # source://koala//lib/koala/api/graph_collection.rb#18
  def raw_response; end

  # The raw summary information from Facebook (total counts).
  #
  # source://koala//lib/koala/api/graph_collection.rb#14
  def summary; end

  class << self
    # Turn the response into a GraphCollection if they're pageable;
    # if not, return the data of the original response.
    # The Ads API (uniquely so far) returns a hash rather than an array when queried
    # with get_connections.
    #
    # @private
    #
    # source://koala//lib/koala/api/graph_collection.rb#44
    def evaluate(response, api); end

    # response will always be an instance of Koala::HTTPService::Response
    # since that is what we get from Koala::Facebook::API#api
    #
    # @return [Boolean]
    #
    # source://koala//lib/koala/api/graph_collection.rb#52
    def is_pageable?(response); end

    # Parse the previous and next page URLs Facebook provides in pageable results.
    # You'll mainly need to use this when using a non-Rails framework (one without url_for);
    # to store paging information between page loads, pass the URL (from GraphCollection#paging)
    # and use parse_page_url to turn it into parameters useful for {Koala::Facebook::API#get_page}.
    #
    # @param url the paging URL to turn into graph_call parameters
    # @return an array of parameters that can be provided via graph_call(*parsed_params)
    #
    # source://koala//lib/koala/api/graph_collection.rb#113
    def parse_page_url(url); end
  end
end

# Facebook responded with an error to an API request. If the exception contains a nil
# http_status, then the error was detected before making a call to Facebook. (e.g. missing access token)
#
# source://koala//lib/koala/errors.rb#15
class Koala::Facebook::APIError < ::Koala::KoalaError
  # Create a new API Error
  #
  # @param http_status [Integer] The HTTP status code of the response
  # @param response_body [String] The response body
  # @param error_info One of the following:
  #   [Hash] The error information extracted from the request
  #   ("type", "code", "error_subcode", "message")
  #   [String] The error description
  #   If error_info is nil or not provided, the method will attempt to extract
  #   the error info from the response_body
  # @return the newly created APIError
  #
  # source://koala//lib/koala/errors.rb#43
  def initialize(http_status, response_body, error_info = T.unsafe(nil)); end

  # Returns the value of attribute fb_ada_usage.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_ada_usage; end

  # Sets the attribute fb_ada_usage
  #
  # @param value the value to set the attribute fb_ada_usage to.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_ada_usage=(_arg0); end

  # Returns the value of attribute fb_app_usage.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_app_usage; end

  # Sets the attribute fb_app_usage
  #
  # @param value the value to set the attribute fb_app_usage to.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_app_usage=(_arg0); end

  # Returns the value of attribute fb_buc_usage.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_buc_usage; end

  # Sets the attribute fb_buc_usage
  #
  # @param value the value to set the attribute fb_buc_usage to.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_buc_usage=(_arg0); end

  # Returns the value of attribute fb_error_code.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_code; end

  # Sets the attribute fb_error_code
  #
  # @param value the value to set the attribute fb_error_code to.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_code=(_arg0); end

  # Returns the value of attribute fb_error_debug.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_debug; end

  # Sets the attribute fb_error_debug
  #
  # @param value the value to set the attribute fb_error_debug to.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_debug=(_arg0); end

  # Returns the value of attribute fb_error_message.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_message; end

  # Sets the attribute fb_error_message
  #
  # @param value the value to set the attribute fb_error_message to.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_message=(_arg0); end

  # Returns the value of attribute fb_error_rev.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_rev; end

  # Sets the attribute fb_error_rev
  #
  # @param value the value to set the attribute fb_error_rev to.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_rev=(_arg0); end

  # Returns the value of attribute fb_error_subcode.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_subcode; end

  # Sets the attribute fb_error_subcode
  #
  # @param value the value to set the attribute fb_error_subcode to.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_subcode=(_arg0); end

  # Returns the value of attribute fb_error_trace_id.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_trace_id; end

  # Sets the attribute fb_error_trace_id
  #
  # @param value the value to set the attribute fb_error_trace_id to.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_trace_id=(_arg0); end

  # Returns the value of attribute fb_error_type.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_type; end

  # Sets the attribute fb_error_type
  #
  # @param value the value to set the attribute fb_error_type to.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_type=(_arg0); end

  # Returns the value of attribute fb_error_user_msg.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_user_msg; end

  # Sets the attribute fb_error_user_msg
  #
  # @param value the value to set the attribute fb_error_user_msg to.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_user_msg=(_arg0); end

  # Returns the value of attribute fb_error_user_title.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_user_title; end

  # Sets the attribute fb_error_user_title
  #
  # @param value the value to set the attribute fb_error_user_title to.
  #
  # source://koala//lib/koala/errors.rb#16
  def fb_error_user_title=(_arg0); end

  # Returns the value of attribute http_status.
  #
  # source://koala//lib/koala/errors.rb#16
  def http_status; end

  # Sets the attribute http_status
  #
  # @param value the value to set the attribute http_status to.
  #
  # source://koala//lib/koala/errors.rb#16
  def http_status=(_arg0); end

  # Returns the value of attribute response_body.
  #
  # source://koala//lib/koala/errors.rb#16
  def response_body; end

  # Sets the attribute response_body
  #
  # @param value the value to set the attribute response_body to.
  #
  # source://koala//lib/koala/errors.rb#16
  def response_body=(_arg0); end

  private

  # refs: https://developers.facebook.com/docs/graph-api/overview/rate-limiting/#headers
  # NOTE: The header will contain a JSON-formatted string that describes current application rate limit usage.
  #
  # source://koala//lib/koala/errors.rb#96
  def json_parse_for(error_info, key); end
end

# Required for realtime updates validation
#
# source://koala//lib/koala/errors.rb#11
class Koala::Facebook::AppSecretNotDefinedError < ::Koala::KoalaError; end

# All graph API authentication failures.
#
# source://koala//lib/koala/errors.rb#120
class Koala::Facebook::AuthenticationError < ::Koala::Facebook::ClientError; end

# Facebook returned an invalid response body
#
# source://koala//lib/koala/errors.rb#108
class Koala::Facebook::BadFacebookResponse < ::Koala::Facebook::APIError; end

# Any error with a 4xx HTTP status code
#
# source://koala//lib/koala/errors.rb#117
class Koala::Facebook::ClientError < ::Koala::Facebook::APIError; end

# Methods used to interact with the Facebook Graph API.
#
# See https://github.com/arsduo/koala/wiki/Graph-API for a general introduction to Koala
# and the Graph API.
#
# The Graph API is made up of the objects in Facebook (e.g., people, pages,
# events, photos, etc.) and the connections between them (e.g., friends,
# photo tags, event RSVPs, etc.). Koala provides access to those
# objects types in a generic way. For example, given an OAuth access
# token, this will fetch the profile of the active user and the list
# of the user's friends:
#
# You can see a list of all of the objects and connections supported
# by the API at http://developers.facebook.com/docs/reference/api/.
#
# You can obtain an access token via OAuth or by using the Facebook JavaScript SDK.
# If you're using the JavaScript SDK, you can use the
# {Koala::Facebook::OAuth#get_user_from_cookie} method to get the OAuth access token
# for the active user from the cookie provided by Facebook.
# See the Koala and Facebook documentation for more information.
#
# @example
#   graph = Koala::Facebook::API.new(access_token)
#   user = graph.get_object("me")
#   friends = graph.get_connections(user["id"], "friends")
#
# source://koala//lib/koala/api/graph_api_methods.rb#34
module Koala::Facebook::GraphAPIMethods
  # Execute a set of Graph API calls as a batch.
  # See {https://github.com/arsduo/koala/wiki/Batch-requests batch request documentation}
  # for more information and examples.
  #
  # @example
  #   results = @api.batch do |batch_api|
  #   batch_api.get_object('me')
  #   batch_api.get_object(KoalaTest.user1)
  #   end
  #   # => [{'id' => my_id, ...}, {'id' => koppel_id, ...}]
  #
  #   # You can also provide blocks to your operations to process the
  #   # results, which is often useful if you're constructing batch
  #   # requests in various locations and want to keep the code
  #   # together in logical places.
  #   # See readme.md and the wiki for more examples.
  #   @api.batch do |batch_api|
  #   batch_api.get_object('me') {|data| data["id"] }
  #   batch_api.get_object(KoalaTest.user1) {|data| data["name"] }
  #   end
  #   # => [my_id, "Alex Koppel"]
  # @param http_options HTTP options for the entire request.
  # @raise [Koala::Facebook::APIError] only if there is a problem with the overall batch request
  #   (e.g. connectivity failure, an operation with a missing dependency).
  #   Individual calls that error out will be represented as an unraised
  #   APIError in the appropriate spot in the results array.
  # @return an array of results from your batch calls (as if you'd made them individually),
  #   arranged in the same order they're made.
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#458
  def batch(http_options = T.unsafe(nil), &block); end

  # Get an access token information
  # The access token used to instantiate the API object needs to be
  # the app access token or a valid User Access Token from a developer of the app.
  # See https://developers.facebook.com/docs/howtos/login/debugging-access-tokens/#step1
  #
  # @param input_token the access token you want to inspect
  # @return a JSON array containing data and a map of fields
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#389
  def debug_token(input_token, &block); end

  # Delete an object's connection (for instance, unliking the object).
  #
  # @note to access connections like /user_id/CONNECTION/other_user_id,
  #   simply pass "CONNECTION/other_user_id" as the connection_name
  # @param id the object ID (string or number)
  # @param connection_name what
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @raise [AuthenticationError]
  # @return true if successful, false (or an APIError) if not
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#175
  def delete_connections(id, connection_name, args = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Unlike a given object.
  # Convenience method equivalent to delete_connection(id, "likes").
  #
  # @param id the object ID (string or number)
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @raise [AuthenticationError]
  # @return true if successful, false (or an APIError) if not
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#336
  def delete_like(id, options = T.unsafe(nil), &block); end

  # Delete an object from the Graph if you have appropriate permissions.
  #
  # @param id the object ID (string or number)
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @raise [AuthenticationError]
  # @return true if successful, false (or an APIError) if not
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#107
  def delete_object(id, options = T.unsafe(nil), &block); end

  # Fetch information about a given connection (e.g. type of activity -- feed, events, photos, etc.)
  # for a specific user.
  # See {http://developers.facebook.com/docs/api Facebook's documentation} for a complete list of connections.
  #
  # @note to access connections like /user_id/CONNECTION/other_user_id,
  #   simply pass "CONNECTION/other_user_id" as the connection_name
  # @param connection_name what
  # @param args any additional arguments
  # @param id the object ID (string or number)
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @return [Koala::Facebook::API::GraphCollection] an array of object hashes (in most cases)
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#127
  def get_connection(id, connection_name, args = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Fetch information about a given connection (e.g. type of activity -- feed, events, photos, etc.)
  # for a specific user.
  # See {http://developers.facebook.com/docs/api Facebook's documentation} for a complete list of connections.
  #
  # @note to access connections like /user_id/CONNECTION/other_user_id,
  #   simply pass "CONNECTION/other_user_id" as the connection_name
  # @param connection_name what
  # @param args any additional arguments
  # @param id the object ID (string or number)
  # @return [Koala::Facebook::API::GraphCollection] an array of object hashes (in most cases)
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#127
  def get_connections(id, connection_name, args = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Get information about a Facebook object.
  #
  # @example
  #   get_object("me")  # => {"id" => ..., "name" => ...}
  #   get_object("me") {|data| data['education']}  # => only education section of profile
  # @param id the object ID (string or number)
  # @param args any additional arguments
  #   (fields, metadata, etc. -- see {http://developers.facebook.com/docs/reference/api/ Facebook's documentation})
  # @param block for post-processing. It receives the result data; the
  #   return value of the method is the result of the block, if
  #   provided.  (see Koala::Facebook::API#api)
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @raise [Koala::Facebook::APIError] if the ID is invalid or you don't have access to that object
  # @return a hash of object data
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#54
  def get_object(id, args = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Get the metadata of a Facebook object, including its type.
  #
  # @example
  #   get_object_metadata("442575165800306")=>{"metadata" => "page", ...}
  #   get_object_metadata("190822584430113")=>{"metadata" => "status", ...}
  # @param id the object ID (string or number)
  # @raise [Koala::Facebook::ClientError] if the ID is invalid
  # @return a string of Facebook object type
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#68
  def get_object_metadata(id, &block); end

  # Get information about multiple Facebook objects in one call.
  #
  # @param ids an array or comma-separated string of object IDs
  # @param args any additional arguments
  #   (fields, metadata, etc. -- see {http://developers.facebook.com/docs/reference/api/ Facebook's documentation})
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @raise [Koala::Facebook::APIError] if any ID is invalid or you don't have access to that object
  # @return an array of object data hashes
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#83
  def get_objects(ids, args = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Certain calls such as {#get_connections} return an array of results which you can page through
  # forwards and backwards (to see more feed stories, search results, etc.).
  # Those methods use get_page to request another set of results from Facebook.
  #
  # @note You'll rarely need to use this method unless you're using Sinatra or another non-Rails framework
  #   (see {Koala::Facebook::API::GraphCollection GraphCollection} for more information).
  # @param params an array of arguments to graph_call
  #   as returned by {Koala::Facebook::API::GraphCollection.parse_page_url}.
  # @return Koala::Facebook::API::GraphCollection the appropriate page of results (an empty array if there are none)
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#420
  def get_page(params, &block); end

  # Get a page's access token, allowing you to act as the page.
  # Convenience method for @api.get_object(page_id, :fields => "access_token").
  #
  # @param id the page ID
  # @param args any additional arguments
  #   (fields, metadata, etc. -- see {http://developers.facebook.com/docs/reference/api/ Facebook's documentation})
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @return the page's access token (discarding expiration and any other information)
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#372
  def get_page_access_token(id, args = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Fetches a photo url.
  # Note that this method returns the picture url, not the full API
  # response. For the hash containing the full metadata for the photo, use
  # #get_user_picture_data instead.
  #
  # @note to delete photos or videos, use delete_object(id)
  # @param options options for Facebook (see #get_object).
  #   To get a different size photo, pass :type => size (small, normal, large, square).
  # @return the URL to the image
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#193
  def get_picture(object, args = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Fetches a photo data hash.
  #
  # @param args any additional arguments
  #   (fields, metadata, etc. -- see {http://developers.facebook.com/docs/reference/api/ Facebook's documentation})
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @return a hash of object data
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#210
  def get_picture_data(object, args = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://koala//lib/koala/api/graph_api_methods.rb#219
  def get_user_picture_data(*args, &block); end

  # Comment on a given object.
  # Convenience method equivalent to put_connection(id, "comments").
  #
  # To delete comments, use delete_object(comment_id).
  # To get comments, use get_connections(object, "likes").
  #
  # @param message the comment to write
  # @param id the object ID (string or number)
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @return a hash containing the new object's id
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#308
  def put_comment(id, message, options = T.unsafe(nil), &block); end

  # Write an object to the Graph for a specific user.
  # See {http://developers.facebook.com/docs/api#publishing Facebook's documentation}
  # for all the supported writeable objects. It is important to note that objects
  # take the singular form, i.e. "event" when using put_connections.
  #
  # Most write operations require extended permissions. For example,
  # publishing wall posts requires the "publish_stream" permission. See
  # http://developers.facebook.com/docs/authentication/ for details about
  # extended permissions.
  #
  # @example
  #   graph.put_connections("me", "feed", :message => "Hello, world")
  #   => writes "Hello, world" to the active user's wall
  # @note to access connections like /user_id/CONNECTION/other_user_id,
  #   simply pass "CONNECTION/other_user_id" as the connection_name
  # @param id the object ID (string or number)
  # @param connection_name what
  # @param args any additional arguments
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @raise [AuthenticationError]
  # @return a hash containing the new object's id
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#157
  def put_connections(id, connection_name, args = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Like a given object.
  # Convenience method equivalent to put_connections(id, "likes").
  #
  # To get a list of a user's or object's likes, use get_connections(id, "likes").
  #
  # @param id the object ID (string or number)
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @return a hash containing the new object's id
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#323
  def put_like(id, options = T.unsafe(nil), &block); end

  # Write an object to the Graph for a specific user.
  #
  # @note put_object is (for historical reasons) the same as put_connections.
  #   Please use put_connections; in a future version of Koala (2.0?),
  #   put_object will issue a POST directly to an individual object, not to a connection.
  # @see #put_connections
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#96
  def put_object(parent_object, connection_name, args = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Upload a photo.
  #
  # This can be called in multiple ways:
  #   put_picture(file, [content_type], ...)
  #   put_picture(path_to_file, [content_type], ...)
  #   put_picture(picture_url, ...)
  #
  # You can also pass in uploaded files directly from Rails or Sinatra.
  # See {https://github.com/arsduo/koala/wiki/Uploading-Photos-and-Videos the Koala wiki} for more information.
  #
  # @example
  #   put_picture(file, content_type, {:message => "Message"}, 01234560)
  #   put_picture(params[:file], {:message => "Message"})
  #   # with URLs, there's no optional content type field
  #   put_picture(picture_url, {:message => "Message"}, my_page_id)
  # @note to access the media after upload, you'll need the user_photos or user_videos permission as appropriate.
  # @param target_id the Facebook object to which to post the picture (default: "me")
  # @param args any additional arguments
  #   (fields, metadata, etc. -- see {http://developers.facebook.com/docs/reference/api/ Facebook's documentation})
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @return a hash containing the new object's id
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#248
  def put_picture(*picture_args, &block); end

  # Upload a video.  Functions exactly the same as put_picture (URLs supported as of Facebook
  # API version 2.3).
  #
  # @see #put_picture
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#255
  def put_video(*video_args, &block); end

  # Write directly to the user's wall.
  # Convenience method equivalent to put_connections(id, "feed").
  #
  # To get wall posts, use get_connections(user, "feed")
  # To delete a wall post, use delete_object(post_id)
  #
  # @example
  #   @api.put_wall_post("Hello there!", {
  #   "name" => "Link name",
  #   "link" => "http://www.example.com/",
  #   "caption" => "{*actor*} posted a new review",
  #   "description" => "This is a longer description of the attachment",
  #   "picture" => "http://www.example.com/thumbnail.jpg"
  #   })
  # @param message the message to write for the wall
  # @param attachment a hash describing the wall post
  #   (see the {https://developers.facebook.com/docs/guides/attachments/ stream attachments} documentation.)
  #   If attachment contains a properties key, this will be turned to
  #   JSON (if it's a hash) since Facebook's API, oddly, requires
  #   this.
  # @param target_id the target wall
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @return a hash containing the new object's id
  # @see #put_connections
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#288
  def put_wall_post(message, attachment = T.unsafe(nil), target_id = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Search for a given query among visible Facebook objects.
  # See {http://developers.facebook.com/docs/reference/api/#searching Facebook documentation} for more information.
  #
  # @param search_terms the query to search for
  # @param args object type and any additional arguments, such as fields, etc.
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @raise [ArgumentError]
  # @return [Koala::Facebook::API::GraphCollection] an array of search results
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#351
  def search(search_terms, args = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # App restrictions require you to JSON-encode the restriction value. This
  # is neither obvious nor intuitive, so this convenience method is
  # provided.
  #
  # @param args any additional arguments
  #   (fields, metadata, etc. -- see {http://developers.facebook.com/docs/reference/api/ Facebook's documentation})
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#404
  def set_app_restrictions(app_id, restrictions_hash, args = T.unsafe(nil), options = T.unsafe(nil), &block); end

  private

  # @raise [KoalaError]
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#470
  def parse_media_args(media_args, method); end

  # @return [Boolean]
  #
  # source://koala//lib/koala/api/graph_api_methods.rb#493
  def url?(data); end
end

# @private
#
# source://koala//lib/koala/api/batch_operation.rb#7
class Koala::Facebook::GraphBatchAPI < ::Koala::Facebook::API
  # @return [GraphBatchAPI] a new instance of GraphBatchAPI
  #
  # source://koala//lib/koala/api/graph_batch_api.rb#15
  def initialize(api); end

  # source://koala//lib/koala/api/graph_batch_api.rb#145
  def access_token; end

  # source://koala//lib/koala/api/graph_batch_api.rb#149
  def app_secret; end

  # source://koala//lib/koala/api/graph_batch_api.rb#84
  def bad_response; end

  # source://koala//lib/koala/api/graph_batch_api.rb#118
  def batch_args(calls_for_batch); end

  # source://koala//lib/koala/api/graph_batch_api.rb#19
  def batch_calls; end

  # source://koala//lib/koala/api/graph_batch_api.rb#132
  def desired_component(component:, response:, headers:); end

  # source://koala//lib/koala/api/graph_batch_api.rb#111
  def error_from_response(response, headers); end

  # execute the queued batch calls. limits it to 50 requests per call.
  # NOTE: if you use `name` and JsonPath references, you should ensure to call `execute` for each
  # co-reference group and that the group size is not greater than the above limits.
  #
  # source://koala//lib/koala/api/graph_batch_api.rb#44
  def execute(http_options = T.unsafe(nil)); end

  # source://koala//lib/koala/api/graph_batch_api.rb#65
  def generate_results(response, batch); end

  # Enqueue a call into the batch for later processing.
  # See API#graph_call
  #
  # source://koala//lib/koala/api/graph_batch_api.rb#25
  def graph_call(path, args = T.unsafe(nil), verb = T.unsafe(nil), options = T.unsafe(nil), &post_processing); end

  # source://koala//lib/koala/api/graph_batch_api.rb#103
  def headers_from_response(response); end

  # source://koala//lib/koala/api/graph_batch_api.rb#126
  def json_body(response); end

  # Returns the value of attribute original_api.
  #
  # source://koala//lib/koala/api/graph_batch_api.rb#14
  def original_api; end

  # source://koala//lib/koala/api/graph_batch_api.rb#89
  def result_from_response(response, options); end
end

# @private
#
# source://koala//lib/koala/api/batch_operation.rb#8
class Koala::Facebook::GraphBatchAPI::BatchOperation
  # @raise [AuthenticationError]
  # @return [BatchOperation] a new instance of BatchOperation
  #
  # source://koala//lib/koala/api/batch_operation.rb#17
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute access_token.
  #
  # source://koala//lib/koala/api/batch_operation.rb#9
  def access_token; end

  # Returns the value of attribute batch_api.
  #
  # source://koala//lib/koala/api/batch_operation.rb#9
  def batch_api; end

  # Returns the value of attribute files.
  #
  # source://koala//lib/koala/api/batch_operation.rb#9
  def files; end

  # Returns the value of attribute http_options.
  #
  # source://koala//lib/koala/api/batch_operation.rb#9
  def http_options; end

  # Returns the value of attribute identifier.
  #
  # source://koala//lib/koala/api/batch_operation.rb#9
  def identifier; end

  # Returns the value of attribute post_processing.
  #
  # source://koala//lib/koala/api/batch_operation.rb#9
  def post_processing; end

  # source://koala//lib/koala/api/batch_operation.rb#32
  def to_batch_params(main_access_token, app_secret); end

  protected

  # @return [Boolean]
  #
  # source://koala//lib/koala/api/batch_operation.rb#80
  def args_in_url?; end

  # source://koala//lib/koala/api/batch_operation.rb#66
  def process_binary_args; end

  class << self
    # source://koala//lib/koala/api/batch_operation.rb#13
    def next_identifier; end
  end
end

# Limits from @see https://developers.facebook.com/docs/marketing-api/batch-requests/v2.8
#
# source://koala//lib/koala/api/graph_batch_api.rb#12
Koala::Facebook::GraphBatchAPI::MAX_CALLS = T.let(T.unsafe(nil), Integer)

# This class, given a Koala::HTTPService::Response object, will check for Graph API-specific
# errors. This returns an error of the appropriate type which can be immediately raised
# (non-batch) or added to the list of batch results (batch)
#
# source://koala//lib/koala/api/graph_error_checker.rb#6
class Koala::Facebook::GraphErrorChecker
  # @return [GraphErrorChecker] a new instance of GraphErrorChecker
  #
  # source://koala//lib/koala/api/graph_error_checker.rb#8
  def initialize(http_status, body, headers); end

  # Returns the value of attribute body.
  #
  # source://koala//lib/koala/api/graph_error_checker.rb#7
  def body; end

  # source://koala//lib/koala/api/graph_error_checker.rb#22
  def error_if_appropriate; end

  # Returns the value of attribute headers.
  #
  # source://koala//lib/koala/api/graph_error_checker.rb#7
  def headers; end

  # Returns the value of attribute http_status.
  #
  # source://koala//lib/koala/api/graph_error_checker.rb#7
  def http_status; end

  protected

  # @return [Boolean]
  #
  # source://koala//lib/koala/api/graph_error_checker.rb#40
  def auth_error?; end

  # source://koala//lib/koala/api/graph_error_checker.rb#56
  def base_error_info; end

  # source://koala//lib/koala/api/graph_error_checker.rb#30
  def error_class; end

  # source://koala//lib/koala/api/graph_error_checker.rb#47
  def error_info; end

  # source://koala//lib/koala/api/graph_error_checker.rb#60
  def response_hash; end
end

# Facebook has a set of standardized error codes, some of which represent problems with the
# token.
#
# source://koala//lib/koala/api/graph_error_checker.rb#16
Koala::Facebook::GraphErrorChecker::AUTHENTICATION_ERROR_CODES = T.let(T.unsafe(nil), Array)

# Facebook can return debug information in the response headers -- see
# https://developers.facebook.com/docs/graph-api/using-graph-api#bugdebug
#
# source://koala//lib/koala/api/graph_error_checker.rb#20
Koala::Facebook::GraphErrorChecker::DEBUG_HEADERS = T.let(T.unsafe(nil), Array)

# source://koala//lib/koala/oauth.rb#7
class Koala::Facebook::OAuth
  # Creates a new OAuth client.
  #
  # @param app_id [String, Integer] a Facebook application ID
  # @param app_secret a Facebook application secret
  # @param oauth_callback_url the URL in your app to which users authenticating with OAuth will be sent
  # @return [OAuth] a new instance of OAuth
  #
  # source://koala//lib/koala/oauth.rb#15
  def initialize(app_id = T.unsafe(nil), app_secret = T.unsafe(nil), oauth_callback_url = T.unsafe(nil)); end

  # Returns the value of attribute app_id.
  #
  # source://koala//lib/koala/oauth.rb#8
  def app_id; end

  # Returns the value of attribute app_secret.
  #
  # source://koala//lib/koala/oauth.rb#8
  def app_secret; end

  # @param access_token the access token to exchange
  # @param options any additional parameters to send to Facebook when exchanging tokens.
  # @return A new access token or the existing one, set to expire in 60 days.
  # @see exchange_access_token_info
  #
  # source://koala//lib/koala/oauth.rb#225
  def exchange_access_token(access_token, options = T.unsafe(nil)); end

  # Fetches an access_token with extended expiration time, along with any other information provided by Facebook.
  # See https://developers.facebook.com/docs/offline-access-deprecation/#extend_token (search for fb_exchange_token).
  #
  # @param access_token the access token to exchange
  # @param options any additional parameters to send to Facebook when exchanging tokens.
  # @return the access token with extended expiration time and other information (expiration, etc.)
  #
  # source://koala//lib/koala/oauth.rb#211
  def exchange_access_token_info(access_token, options = T.unsafe(nil)); end

  # Generates a 'client code' from a server side long-lived access token. With the generated
  # code, it can be sent to a client application which can then use it to get a long-lived
  # access token from Facebook. After which the clients can use that access token to make
  # requests to Facebook without having to use the server token, yet the server access token
  # remains valid.
  # See https://developers.facebook.com/docs/facebook-login/access-tokens/#long-via-code
  #
  # @param access_token a user's long lived (server) access token
  # @raise Koala::Facebook::ServerError if Facebook returns a server error (status >= 500)
  # @raise Koala::Facebook::OAuthTokenRequestError if Facebook returns an error response (status >= 400)
  # @raise Koala::Facebook::BadFacebookResponse if Facebook returns a blank response
  # @raise Koala::KoalaError if response does not contain 'code' hash key
  # @return a string of the generated 'code'
  #
  # source://koala//lib/koala/oauth.rb#130
  def generate_client_code(access_token); end

  # Fetches the access token (ignoring expiration and other info) from Facebook.
  # Useful when you've received an OAuth code using the server-side authentication process.
  #
  # @note The server-side authentication and dialog methods should only be used
  #   if your application can't use the Facebook Javascript SDK,
  #   which provides a much better user experience.
  #   See http://developers.facebook.com/docs/reference/javascript/.
  # @param options any additional parameters to send to Facebook when redeeming the token
  # @param code an OAuth code received from Facebook
  # @raise Koala::Facebook::OAuthTokenRequestError if Facebook returns an error response
  # @return the access token
  # @see get_access_token_info
  #
  # source://koala//lib/koala/oauth.rb#174
  def get_access_token(code, options = T.unsafe(nil)); end

  # Fetches an access token, token expiration, and other info from Facebook.
  # Useful when you've received an OAuth code using the server-side authentication process.
  #
  # @note The server-side authentication and dialog methods should only be used
  #   if your application can't use the Facebook Javascript SDK,
  #   which provides a much better user experience.
  #   See http://developers.facebook.com/docs/reference/javascript/.
  # @param options any additional parameters to send to Facebook when redeeming the token
  # @param code an OAuth code received from Facebook
  # @raise Koala::Facebook::OAuthTokenRequestError if Facebook returns an error response
  # @return a hash of the access token info returned by Facebook (token, expiration, etc.)
  # @see url_for_oauth_code
  #
  # source://koala//lib/koala/oauth.rb#157
  def get_access_token_info(code, options = T.unsafe(nil)); end

  # Fetches the application's access token (ignoring expiration and other info).
  #
  # @param options any additional parameters to send to Facebook when redeeming the token
  # @return the application access token
  # @see get_app_access_token_info
  #
  # source://koala//lib/koala/oauth.rb#198
  def get_app_access_token(options = T.unsafe(nil)); end

  # Fetches the application's access token, along with any other information provided by Facebook.
  # See http://developers.facebook.com/docs/authentication/ (search for App Login).
  #
  # @param options any additional parameters to send to Facebook when redeeming the token
  # @return the application access token and other information (expiration, etc.)
  #
  # source://koala//lib/koala/oauth.rb#187
  def get_app_access_token_info(options = T.unsafe(nil)); end

  # Parses the cookie set Facebook's JavaScript SDK.
  #
  # @note this method can only be called once per session, as the OAuth code
  #   Facebook supplies can only be redeemed once.  Your application
  #   must handle cross-request storage of this information; you can no
  #   longer call this method multiple times.  (This works out, as the
  #   method has to make a call to FB's servers anyway, which you don't
  #   want on every call.)
  # @param cookie_hash a set of cookies that includes the Facebook cookie.
  #   You can pass Rack/Rails/Sinatra's cookie hash directly to this method.
  # @return the authenticated user's information as a hash, or nil.
  #
  # source://koala//lib/koala/oauth.rb#34
  def get_user_info_from_cookie(cookie_hash); end

  # Parses the cookie set Facebook's JavaScript SDK.
  #
  # @note this method can only be called once per session, as the OAuth code
  #   Facebook supplies can only be redeemed once.  Your application
  #   must handle cross-request storage of this information; you can no
  #   longer call this method multiple times.  (This works out, as the
  #   method has to make a call to FB's servers anyway, which you don't
  #   want on every call.)
  # @param cookie_hash a set of cookies that includes the Facebook cookie.
  #   You can pass Rack/Rails/Sinatra's cookie hash directly to this method.
  # @return the authenticated user's information as a hash, or nil.
  #
  # source://koala//lib/koala/oauth.rb#34
  def get_user_info_from_cookies(cookie_hash); end

  # Returns the value of attribute oauth_callback_url.
  #
  # source://koala//lib/koala/oauth.rb#8
  def oauth_callback_url; end

  # Parses a signed request string provided by Facebook to canvas apps or in a secure cookie.
  #
  # @param input the signed request from Facebook
  # @raise OAuthSignatureError if the signature is incomplete, invalid, or using an unsupported algorithm
  # @return a hash of the validated request information
  #
  # source://koala//lib/koala/oauth.rb#238
  def parse_signed_request(input); end

  # Once you receive an OAuth code, you need to redeem it from Facebook using an appropriate URL.
  # (This is done by your server behind the scenes.)
  # See http://developers.facebook.com/docs/authentication/.
  #
  # @note The server-side authentication and dialog methods should only be used
  #   if your application can't use the Facebook Javascript SDK,
  #   which provides a much better user experience.
  #   See http://developers.facebook.com/docs/reference/javascript/.
  # @param code an OAuth code received from Facebook
  # @param options any additional query parameters to add to the URL
  # @raise ArgumentError if no OAuth callback was specified in OAuth#new or in options as :redirect_uri
  # @return an URL your server can query for the user's access token
  # @see #url_for_oauth_code
  #
  # source://koala//lib/koala/oauth.rb#90
  def url_for_access_token(code, options = T.unsafe(nil)); end

  # Builds a URL for a given dialog (feed, friends, OAuth, pay, send, etc.)
  # See http://developers.facebook.com/docs/reference/dialogs/.
  #
  # @note The server-side authentication and dialog methods should only be used
  #   if your application can't use the Facebook Javascript SDK,
  #   which provides a much better user experience.
  #   See http://developers.facebook.com/docs/reference/javascript/.
  # @param dialog_type the kind of Facebook dialog you want to show
  # @param options any additional query parameters to add to the URL
  # @return an URL your server can query for the user's access token
  #
  # source://koala//lib/koala/oauth.rb#109
  def url_for_dialog(dialog_type, options = T.unsafe(nil)); end

  # Builds an OAuth URL, where users will be prompted to log in and for any desired permissions.
  # When the users log in, you receive a callback with their
  # See http://developers.facebook.com/docs/authentication/.
  #
  # @note The server-side authentication and dialog methods should only be used
  #   if your application can't use the Facebook Javascript SDK,
  #   which provides a much better user experience.
  #   See http://developers.facebook.com/docs/reference/javascript/.
  # @option options
  # @option options
  # @param options any query values to add to the URL, as well as any special/required values listed below.
  # @raise ArgumentError if no OAuth callback was specified in OAuth#new or in options as :redirect_uri
  # @return an OAuth URL you can send your users to
  # @see #url_for_access_token
  #
  # source://koala//lib/koala/oauth.rb#65
  def url_for_oauth_code(options = T.unsafe(nil)); end

  protected

  # base 64
  # directly from https://github.com/facebook/crypto-request-examples/raw/master/sample.rb
  #
  # source://koala//lib/koala/oauth.rb#319
  def base64_url_decode(str); end

  # source://koala//lib/koala/oauth.rb#333
  def build_url(type, path, require_redirect_uri = T.unsafe(nil), url_options = T.unsafe(nil)); end

  # @raise [ServerError]
  #
  # source://koala//lib/koala/oauth.rb#305
  def fetch_token_string(args, post = T.unsafe(nil), endpoint = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://koala//lib/koala/oauth.rb#256
  def get_token_from_server(args, post = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://koala//lib/koala/oauth.rb#262
  def parse_access_token(response_text); end

  # source://koala//lib/koala/oauth.rb#285
  def parse_signed_cookie(fb_cookie); end

  # source://koala//lib/koala/oauth.rb#271
  def parse_unsigned_cookie(fb_cookie); end

  # source://koala//lib/koala/oauth.rb#324
  def server_url(type); end
end

# The OAuth signature is incomplete, invalid, or using an unsupported algorithm
#
# source://koala//lib/koala/errors.rb#8
class Koala::Facebook::OAuthSignatureError < ::Koala::KoalaError; end

# Facebook responded with an error while attempting to request an access token
#
# source://koala//lib/koala/errors.rb#111
class Koala::Facebook::OAuthTokenRequestError < ::Koala::Facebook::APIError; end

# source://koala//lib/koala/realtime_updates.rb#3
class Koala::Facebook::RealtimeUpdates
  # Create a new RealtimeUpdates instance.
  # If you don't have your app's access token, provide the app's secret and
  # Koala will make a request to Facebook for the appropriate token.
  #
  # @option options
  # @option options
  # @option options
  # @param options initialization options.
  # @raise ArgumentError if the application ID and one of the app access token or the secret are not provided.
  # @return [RealtimeUpdates] a new instance of RealtimeUpdates
  #
  # source://koala//lib/koala/realtime_updates.rb#22
  def initialize(options = T.unsafe(nil)); end

  # The application API interface used to communicate with Facebook.
  #
  # @return [Koala::Facebook::API]
  #
  # source://koala//lib/koala/realtime_updates.rb#40
  def api; end

  # The app access token, either provided on initialization or fetched from Facebook using the
  # app_id and secret.
  #
  # source://koala//lib/koala/realtime_updates.rb#33
  def app_access_token; end

  # Manage realtime callbacks for changes to users' information.
  # See http://developers.facebook.com/docs/reference/api/realtime.
  #
  # @note: to subscribe to real-time updates, you must have an application access token
  #        or provide the app secret when initializing your RealtimeUpdates object.
  #
  # source://koala//lib/koala/realtime_updates.rb#10
  def app_id; end

  # List all active subscriptions for this application.
  #
  # @return [Array] a list of active subscriptions
  #
  # source://koala//lib/koala/realtime_updates.rb#86
  def list_subscriptions(options = T.unsafe(nil)); end

  # Manage realtime callbacks for changes to users' information.
  # See http://developers.facebook.com/docs/reference/api/realtime.
  #
  # @note: to subscribe to real-time updates, you must have an application access token
  #        or provide the app secret when initializing your RealtimeUpdates object.
  #
  # source://koala//lib/koala/realtime_updates.rb#10
  def secret; end

  # Subscribe to realtime updates for certain fields on a given object (user, page, etc.).
  # See {http://developers.facebook.com/docs/reference/api/realtime the realtime updates documentation}
  # for more information on what objects and fields you can register for.
  #
  # @note Your callback_url must be set up to handle the verification request or the subscription will not be set up.
  # @param object a Facebook ID (name or number)
  # @param fields the fields you want your app to be updated about
  # @param callback_url the URL Facebook should ping when an update is available
  # @param verify_token a token included in the verification request, allowing you to ensure the call is genuine
  #   (see the docs for more information)
  # @raise A subclass of Koala::Facebook::APIError if the subscription request failed.
  #
  # source://koala//lib/koala/realtime_updates.rb#60
  def subscribe(object, fields, callback_url, verify_token, options = T.unsafe(nil)); end

  # The Facebook subscription management URL for your application.
  #
  # source://koala//lib/koala/realtime_updates.rb#146
  def subscription_path; end

  # Unsubscribe from updates for a particular object or from updates.
  #
  # @param object the object whose subscriptions to delete.
  #   If no object is provided, all subscriptions will be removed.
  # @raise A subclass of Koala::Facebook::APIError if the subscription request failed.
  #
  # source://koala//lib/koala/realtime_updates.rb#77
  def unsubscribe(object = T.unsafe(nil), options = T.unsafe(nil)); end

  # Public: As a security measure, all updates from facebook are signed using
  # X-Hub-Signature: sha1=XXXX where XXX is the sha1 of the json payload
  # using your application secret as the key.
  #
  # Example:
  #   # in Rails controller
  #   # @oauth being a previously defined Koala::Facebook::OAuth instance
  #   def receive_update
  #     if @oauth.validate_update(request.body, headers)
  #       ...
  #     end
  #   end
  #
  # source://koala//lib/koala/realtime_updates.rb#131
  def validate_update(body, headers); end

  class << self
    # As a security measure (to prevent DDoS attacks), Facebook sends a verification request to your server
    # after you request a subscription.
    # This method parses the challenge params and makes sure the call is legitimate.
    #
    # @param params the request parameters sent by Facebook.  (You can pass in a Rails params hash.)
    # @param verify_token the verify token sent in the {#subscribe subscription request}, if you provided one
    # @return the challenge string to be sent back to Facebook, or false if the request is invalid.
    # @yield verify_token if you need to compute the verification token
    #   (for instance, if your callback URL includes a record ID, which you look up
    #   and use to calculate a hash), you can pass meet_challenge a block, which
    #   will receive the verify_token received back from Facebook.
    #
    # source://koala//lib/koala/realtime_updates.rb#103
    def meet_challenge(params, verify_token = T.unsafe(nil), &verification_block); end
  end
end

# Any error with a 5xx HTTP status code
#
# source://koala//lib/koala/errors.rb#114
class Koala::Facebook::ServerError < ::Koala::Facebook::APIError; end

# Create and manage test users for your application.
# A test user is a user account associated with an app created for the purpose
# of testing the functionality of that app.
# You can use test users for manual or automated testing --
# Koala's live test suite uses test users to verify the library works with Facebook.
#
# See http://developers.facebook.com/docs/test_users/.
#
# @note the test user API is fairly slow compared to other interfaces
#   (which makes sense -- it's creating whole new user accounts!).
#
# source://koala//lib/koala/test_users.rb#16
class Koala::Facebook::TestUsers
  # Create a new TestUsers instance.
  # If you don't have your app's access token, provide the app's secret and
  # Koala will make a request to Facebook for the appropriate token.
  #
  # @option options
  # @option options
  # @option options
  # @param options initialization options.
  # @raise ArgumentError if the application ID and one of the app access token or the secret are not provided.
  # @return [TestUsers] a new instance of TestUsers
  #
  # source://koala//lib/koala/test_users.rb#32
  def initialize(options = T.unsafe(nil)); end

  # The application API interface used to communicate with Facebook.
  #
  # @return [Koala::Facebook::API]
  #
  # source://koala//lib/koala/test_users.rb#19
  def api; end

  # Returns the value of attribute app_access_token.
  #
  # source://koala//lib/koala/test_users.rb#20
  def app_access_token; end

  # Returns the value of attribute app_id.
  #
  # source://koala//lib/koala/test_users.rb#20
  def app_id; end

  # Make two test users friends.
  #
  # @note there's no way to unfriend test users; you can always just create a new one.
  # @param user1_hash one of the users to friend; the hash must contain both ID and access token (as returned by {#create})
  # @param user2_hash the other user to friend
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @return true if successful, false (or an {Koala::Facebook::APIError APIError}) if not
  #
  # source://koala//lib/koala/test_users.rb#137
  def befriend(user1_hash, user2_hash, options = T.unsafe(nil)); end

  # Create a new test user.
  #
  # @param installed whether the user has installed your app
  # @param permissions a comma-separated string or array of permissions the user has granted (if installed)
  # @param args any additional arguments for the create call (name, etc.)
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @return a hash of information for the new user (id, access token, login URL, etc.)
  #
  # source://koala//lib/koala/test_users.rb#58
  def create(installed, permissions = T.unsafe(nil), args = T.unsafe(nil), options = T.unsafe(nil)); end

  # Create a network of test users, all of whom are friends and have the same permissions.
  #
  # @note this call slows down dramatically the more users you create
  #   (test user calls are slow, and more users => more 1-on-1 connections to be made).
  #   Use carefully.
  # @param network_size how many users to create
  # @param installed whether the users have installed your app (see {#create})
  # @param permissions what permissions the users have granted (see {#create})
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @return the list of users created
  #
  # source://koala//lib/koala/test_users.rb#169
  def create_network(network_size, installed = T.unsafe(nil), permissions = T.unsafe(nil), options = T.unsafe(nil)); end

  # Delete a test user.
  #
  # @param test_user the user to delete; can be either a Facebook ID or the hash returned by {#create}
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @return true if successful, false (or an {Koala::Facebook::APIError APIError}) if not
  #
  # source://koala//lib/koala/test_users.rb#80
  def delete(test_user, options = T.unsafe(nil)); end

  # Deletes all test users in batches of 50.
  #
  # @note if you have a lot of test users (> 20), this operation can take a long time.
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @return a list of the test users that have been deleted
  #
  # source://koala//lib/koala/test_users.rb#92
  def delete_all(options = T.unsafe(nil)); end

  # List all test users for the app.
  #
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @return an array of hashes of user information (id, access token, etc.)
  #
  # source://koala//lib/koala/test_users.rb#70
  def list(options = T.unsafe(nil)); end

  # Returns the value of attribute secret.
  #
  # source://koala//lib/koala/test_users.rb#20
  def secret; end

  # The Facebook test users management URL for your application.
  #
  # source://koala//lib/koala/test_users.rb#184
  def test_user_accounts_path; end

  # Updates a test user's attributes.
  #
  # @note currently, only name and password can be changed;
  #   see {http://developers.facebook.com/docs/test_users/ the Facebook documentation}.
  # @param test_user the user to update; can be either a Facebook ID or the hash returned by {#create}
  # @param args the updates to make
  # @param options request-related options for Koala and Faraday.
  #   See https://github.com/arsduo/koala/wiki/HTTP-Services for additional options.
  # @return true if successful, false (or an {Koala::Facebook::APIError APIError}) if not
  #
  # source://koala//lib/koala/test_users.rb#123
  def update(test_user, args = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://koala//lib/koala/http_service/uploadable_io.rb#4
module Koala::HTTPService
  class << self
    # Encodes a given hash into a query string.
    # This is used mainly by the Batch API nowadays, since Faraday handles this for regular cases.
    #
    # @example
    #   Koala.http_service.encode_params({:a => 2, :b => "My String"})
    #   => "a=2&b=My+String"
    # @param params_hash a hash of values to CGI-encode and appropriately join
    # @return the appropriately-encoded string
    #
    # source://koala//lib/koala/http_service.rb#91
    def encode_params(param_hash); end

    # A customized stack of Faraday middleware that will be used to make each request.
    #
    # source://koala//lib/koala/http_service.rb#11
    def faraday_middleware; end

    # A customized stack of Faraday middleware that will be used to make each request.
    #
    # source://koala//lib/koala/http_service.rb#11
    def faraday_middleware=(_arg0); end

    # source://koala//lib/koala/http_service.rb#103
    def faraday_options(options); end

    # A default set of HTTP options (see https://github.com/arsduo/koala/wiki/HTTP-Services)
    #
    # source://koala//lib/koala/http_service.rb#13
    def http_options; end

    # A default set of HTTP options (see https://github.com/arsduo/koala/wiki/HTTP-Services)
    #
    # source://koala//lib/koala/http_service.rb#13
    def http_options=(_arg0); end

    # Makes a request directly to Facebook.
    #
    # @note You'll rarely need to call this method directly.
    # @param request a Koala::HTTPService::Request object
    # @raise an appropriate connection error if unable to make the request to Facebook
    # @return [Koala::HTTPService::Response] a response object representing the results from Facebook
    # @see Koala::Facebook::API#api
    # @see Koala::Facebook::GraphAPIMethods#graph_call
    #
    # source://koala//lib/koala/http_service.rb#48
    def make_request(request); end
  end
end

# Koala's default middleware stack.
# We encode requests in a Facebook-compatible multipart request,
# and use whichever adapter has been configured for this application.
#
# source://koala//lib/koala/http_service.rb#21
Koala::HTTPService::DEFAULT_MIDDLEWARE = T.let(T.unsafe(nil), Proc)

# Default server information for Facebook. These can be overridden by setting config values.
# See Koala.config.
#
# source://koala//lib/koala/http_service.rb#29
Koala::HTTPService::DEFAULT_SERVERS = T.let(T.unsafe(nil), Hash)

# source://koala//lib/koala/http_service/request.rb#3
class Koala::HTTPService::Request
  # @option options
  # @option options
  # @option options
  # @option options
  # @param path the server path for this request
  # @param verb the HTTP method to use.
  #   If not get or post, this will be turned into a POST request with the appropriate :method
  #   specified in the arguments.
  # @param options various flags to indicate which server to use. (see Koala::Facebook::API#api)
  # @param options
  # @param args arguments to be sent to Facebook
  # @return [Request] a new instance of Request
  #
  # source://koala//lib/koala/http_service/request.rb#17
  def initialize(path:, verb:, args: T.unsafe(nil), options: T.unsafe(nil)); end

  # source://koala//lib/koala/http_service/request.rb#61
  def get_args; end

  # Whether or not this request should use JSON.
  #
  # @return [Boolean] true or false
  #
  # source://koala//lib/koala/http_service/request.rb#80
  def json?; end

  # Calculates a set of request options to pass to Faraday.
  #
  # any specified for the request.
  #
  # @return a hash combining GET parameters (if appropriate), default options, and
  #
  # source://koala//lib/koala/http_service/request.rb#69
  def options; end

  # Determines the path to be requested on Facebook, incorporating an API version if specified.
  #
  # @return the original path, with API version if appropriate.
  #
  # source://koala//lib/koala/http_service/request.rb#34
  def path; end

  # Determines any arguments to be sent in a POST body.
  #
  # other values
  #
  # @return {} for GET; the provided args for POST; those args with the method parameter for
  #
  # source://koala//lib/koala/http_service/request.rb#51
  def post_args; end

  # Returns the value of attribute raw_args.
  #
  # source://koala//lib/koala/http_service/request.rb#4
  def raw_args; end

  # Returns the value of attribute raw_options.
  #
  # source://koala//lib/koala/http_service/request.rb#4
  def raw_options; end

  # Returns the value of attribute raw_path.
  #
  # source://koala//lib/koala/http_service/request.rb#4
  def raw_path; end

  # Returns the value of attribute raw_verb.
  #
  # source://koala//lib/koala/http_service/request.rb#4
  def raw_verb; end

  # The address of the appropriate Facebook server.
  #
  # @return a complete server address with protocol
  #
  # source://koala//lib/koala/http_service/request.rb#87
  def server; end

  # Determines which type of request to send to Facebook. Facebook natively accepts GETs and POSTs, for others we have to include the method in the post body.
  #
  # @return one of get or post
  #
  # source://koala//lib/koala/http_service/request.rb#27
  def verb; end

  protected

  # source://koala//lib/koala/http_service/request.rb#108
  def add_ssl_options(opts); end

  # The arguments to include in the request.
  #
  # source://koala//lib/koala/http_service/request.rb#101
  def args; end

  # Determines whether a given path already contains an API version.
  #
  # @param path the URL path.
  # @return [Boolean] true or false accordingly.
  #
  # source://koala//lib/koala/http_service/request.rb#123
  def path_contains_api_version?; end

  # source://koala//lib/koala/http_service/request.rb#129
  def replace_server_component(host, condition_met, replacement); end
end

# source://koala//lib/koala/http_service/response.rb#3
class Koala::HTTPService::Response
  # Creates a new Response object, which standardizes the response received by Facebook for use within Koala.
  #
  # @return [Response] a new instance of Response
  #
  # source://koala//lib/koala/http_service/response.rb#7
  def initialize(status, body, headers); end

  # Returns the value of attribute body.
  #
  # source://koala//lib/koala/http_service/response.rb#4
  def body; end

  # source://koala//lib/koala/http_service/response.rb#13
  def data; end

  # Returns the value of attribute headers.
  #
  # source://koala//lib/koala/http_service/response.rb#4
  def headers; end

  # Returns the value of attribute status.
  #
  # source://koala//lib/koala/http_service/response.rb#4
  def status; end
end

# source://koala//lib/koala/http_service/uploadable_io.rb#5
class Koala::HTTPService::UploadableIO
  # @raise [KoalaError]
  # @return [UploadableIO] a new instance of UploadableIO
  #
  # source://koala//lib/koala/http_service/uploadable_io.rb#8
  def initialize(io_or_path_or_mixed, content_type = T.unsafe(nil), filename = T.unsafe(nil)); end

  # Returns the value of attribute content_type.
  #
  # source://koala//lib/koala/http_service/uploadable_io.rb#6
  def content_type; end

  # Returns the value of attribute filename.
  #
  # source://koala//lib/koala/http_service/uploadable_io.rb#6
  def filename; end

  # Returns the value of attribute io_or_path.
  #
  # source://koala//lib/koala/http_service/uploadable_io.rb#6
  def io_or_path; end

  # source://koala//lib/koala/http_service/uploadable_io.rb#25
  def to_file; end

  # source://koala//lib/koala/http_service/uploadable_io.rb#21
  def to_upload_io; end

  private

  # source://koala//lib/koala/http_service/uploadable_io.rb#114
  def detect_mime_type(filename); end

  # source://koala//lib/koala/http_service/uploadable_io.rb#86
  def parse_file_object(file, content_type = T.unsafe(nil)); end

  # source://koala//lib/koala/http_service/uploadable_io.rb#48
  def parse_init_mixed_param(mixed, content_type = T.unsafe(nil)); end

  # source://koala//lib/koala/http_service/uploadable_io.rb#102
  def parse_io(io, content_type = T.unsafe(nil)); end

  # source://koala//lib/koala/http_service/uploadable_io.rb#60
  def parse_rails_3_param(uploaded_file, content_type = T.unsafe(nil)); end

  # source://koala//lib/koala/http_service/uploadable_io.rb#73
  def parse_sinatra_param(file_hash, content_type = T.unsafe(nil)); end

  # source://koala//lib/koala/http_service/uploadable_io.rb#94
  def parse_string_path(path, content_type = T.unsafe(nil)); end

  # source://koala//lib/koala/http_service/uploadable_io.rb#124
  def use_mime_module(filename); end

  # source://koala//lib/koala/http_service/uploadable_io.rb#135
  def use_simple_detection(filename); end

  class << self
    # @return [Boolean]
    #
    # source://koala//lib/koala/http_service/uploadable_io.rb#29
    def binary_content?(content); end

    # takes a file object
    #
    # @return [Boolean]
    #
    # source://koala//lib/koala/http_service/uploadable_io.rb#82
    def file_param?(file); end

    # Expects a parameter of type ActionDispatch::Http::UploadedFile
    #
    # @return [Boolean]
    #
    # source://koala//lib/koala/http_service/uploadable_io.rb#56
    def rails_3_param?(uploaded_file); end

    # Expects a Sinatra hash of file info
    #
    # @return [Boolean]
    #
    # source://koala//lib/koala/http_service/uploadable_io.rb#69
    def sinatra_param?(file_hash); end
  end
end

# source://koala//lib/koala/http_service/uploadable_io.rb#34
Koala::HTTPService::UploadableIO::DETECTION_STRATEGIES = T.let(T.unsafe(nil), Array)

# source://koala//lib/koala/http_service/uploadable_io.rb#109
Koala::HTTPService::UploadableIO::MIME_TYPE_STRATEGIES = T.let(T.unsafe(nil), Array)

# source://koala//lib/koala/http_service/uploadable_io.rb#40
Koala::HTTPService::UploadableIO::PARSE_STRATEGIES = T.let(T.unsafe(nil), Array)

# source://koala//lib/koala/errors.rb#3
class Koala::KoalaError < ::StandardError; end

# source://koala//lib/koala/utils.rb#2
module Koala::Utils
  extend ::Forwardable
  extend ::Koala::Utils

  # source://forwardable/1.3.2/forwardable.rb#229
  def debug(*args, **_arg1, &block); end

  # Prints a deprecation message.
  # Each individual message will only be printed once to avoid spamming.
  #
  # source://koala//lib/koala/utils.rb#24
  def deprecate(message); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def error(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def fatal(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def info(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def level(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def level=(*args, **_arg1, &block); end

  # The Koala logger, an instance of the standard Ruby logger, pointing to STDOUT by default.
  # In Rails projects, you can set this to Rails.logger.
  #
  # source://koala//lib/koala/utils.rb#15
  def logger; end

  # The Koala logger, an instance of the standard Ruby logger, pointing to STDOUT by default.
  # In Rails projects, you can set this to Rails.logger.
  #
  # source://koala//lib/koala/utils.rb#15
  def logger=(_arg0); end

  # Ensures that a hash uses symbols as opposed to strings
  # Useful for allowing either syntax for end users
  #
  # source://koala//lib/koala/utils.rb#35
  def symbolize_hash(hash); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def warn(*args, **_arg1, &block); end
end

# @private
#
# source://koala//lib/koala/utils.rb#20
Koala::Utils::DEPRECATION_PREFIX = T.let(T.unsafe(nil), String)

# source://koala//lib/koala/version.rb#2
Koala::VERSION = T.let(T.unsafe(nil), String)
