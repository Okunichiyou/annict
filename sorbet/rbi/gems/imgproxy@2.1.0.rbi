# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `imgproxy` gem.
# Please instead update this file by running `bin/tapioca gem imgproxy`.


# @see Imgproxy::ClassMethods
#
# source://imgproxy//lib/imgproxy/version.rb#1
module Imgproxy
  class << self
    # Imgproxy config
    #
    # @return [Config]
    #
    # source://imgproxy//lib/imgproxy.rb#14
    def config; end

    # Yields Imgproxy config
    #
    #   Imgproxy.configure do |config|
    #     config.endpoint = "http://imgproxy.example.com"
    #     config.key = "your_key"
    #     config.salt = "your_salt"
    #     config.use_short_options = true
    #   end
    #
    # @return [Config]
    # @yieldparam config [Config]
    #
    # source://imgproxy//lib/imgproxy.rb#29
    def configure; end

    # Extends +ActiveStorage::Blob+ with {Imgproxy::Extensions::ActiveStorage.imgproxy_url} method
    # and adds URL adapters for ActiveStorage
    #
    # source://imgproxy//lib/imgproxy.rb#130
    def extend_active_storage!; end

    # Extends +Shrine::UploadedFile+ with {Imgproxy::Extensions::Shrine.imgproxy_url} method
    # and adds URL adapters for Shrine
    #
    # source://imgproxy//lib/imgproxy.rb#141
    def extend_shrine!; end

    # Genrates imgproxy info URL. Supported only by imgproxy pro
    #
    #   Imgproxy.info_url_for("http://images.example.com/images/image.jpg")
    #
    # @option options
    # @option options
    # @param image [String, URI, Object] Source image URL or object applicable for
    #   the configured URL adapters
    # @param options [Hash] Processing options
    # @return [String] imgproxy info URL
    #
    # source://imgproxy//lib/imgproxy.rb#124
    def info_url_for(image, options = T.unsafe(nil)); end

    # Genrates imgproxy URL
    #
    #   Imgproxy.url_for(
    #     "http://images.example.com/images/image.jpg",
    #     width: 500,
    #     height: 400,
    #     resizing_type: :fill,
    #     sharpen: 0.5,
    #     gravity: {
    #       type: :soea,
    #       x_offset: 10,
    #       y_offset: 5,
    #     },
    #     crop: {
    #       width: 2000,
    #       height: 1000,
    #       gravity: {
    #         type: :nowe,
    #         x_offset: 20,
    #         y_offset: 30,
    #       },
    #     },
    #   )
    #
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @param image [String, URI, Object] Source image URL or object applicable for
    #   the configured URL adapters
    # @param options [Hash] Processing options
    # @return [String] imgproxy URL
    # @see https://docs.imgproxy.net/#/generating_the_url_advanced?id=processing-options Available imgproxy URL processing options and their arguments
    #
    # source://imgproxy//lib/imgproxy.rb#110
    def url_for(image, options = T.unsafe(nil)); end
  end
end

# Builds imgproxy URL
#
#   builder = Imgproxy::Builder.new(
#     width: 500,
#     height: 400,
#     resizing_type: :fill,
#     sharpen: 0.5
#   )
#
#   builder.url_for("http://images.example.com/images/image1.jpg")
#   builder.url_for("http://images.example.com/images/image2.jpg")
#
# source://imgproxy//lib/imgproxy/builder.rb#20
class Imgproxy::Builder
  # @param options [Hash] Processing options
  # @return [Builder] a new instance of Builder
  # @see Imgproxy.url_for
  #
  # source://imgproxy//lib/imgproxy/builder.rb#23
  def initialize(options = T.unsafe(nil)); end

  # Genrates imgproxy info URL
  #
  # @param image [String, URI, Object] Source image URL or object applicable for
  #   the configured URL adapters
  # @return [String] imgproxy info URL
  # @see Imgproxy.info_url_for
  #
  # source://imgproxy//lib/imgproxy/builder.rb#51
  def info_url_for(image); end

  # Genrates imgproxy URL
  #
  # @param image [String, URI, Object] Source image URL or object applicable for
  #   the configured URL adapters
  # @return [String] imgproxy URL
  # @see Imgproxy.url_for
  #
  # source://imgproxy//lib/imgproxy/builder.rb#38
  def url_for(image); end

  private

  # source://imgproxy//lib/imgproxy/builder.rb#87
  def base64_url_for(url, ext: T.unsafe(nil)); end

  # source://imgproxy//lib/imgproxy/builder.rb#132
  def config; end

  # source://imgproxy//lib/imgproxy/builder.rb#62
  def extract_builder_options(options); end

  # @return [Boolean]
  #
  # source://imgproxy//lib/imgproxy/builder.rb#93
  def need_escape_url?(url); end

  # source://imgproxy//lib/imgproxy/builder.rb#136
  def not_nil_or(value, fallback); end

  # source://imgproxy//lib/imgproxy/builder.rb#97
  def option_alias(name); end

  # source://imgproxy//lib/imgproxy/builder.rb#81
  def plain_url_for(url, ext: T.unsafe(nil)); end

  # source://imgproxy//lib/imgproxy/builder.rb#69
  def processing_options; end

  # @return [Boolean]
  #
  # source://imgproxy//lib/imgproxy/builder.rb#115
  def ready_to_sign?; end

  # source://imgproxy//lib/imgproxy/builder.rb#103
  def sign_path(path); end

  # source://imgproxy//lib/imgproxy/builder.rb#120
  def signature_key; end

  # source://imgproxy//lib/imgproxy/builder.rb#124
  def signature_salt; end

  # source://imgproxy//lib/imgproxy/builder.rb#128
  def signature_size; end

  # source://imgproxy//lib/imgproxy/builder.rb#75
  def url(image, ext: T.unsafe(nil)); end
end

# source://imgproxy//lib/imgproxy/builder.rb#60
Imgproxy::Builder::NEED_ESCAPE_RE = T.let(T.unsafe(nil), Regexp)

# Imgproxy config
#
# @see Imgproxy.configure
# @see https://github.com/palkan/anyway_config anyway_config
#
# source://imgproxy//lib/imgproxy/config.rb#51
class Imgproxy::Config < ::Anyway::Config
  def always_escape_plain_urls?; end
  def base64_encode_urls?; end

  # @deprecated Please use {#key} instead
  #
  # source://imgproxy//lib/imgproxy/config.rb#99
  def hex_key=(value); end

  # @deprecated Please use {#salt} instead
  #
  # source://imgproxy//lib/imgproxy/config.rb#105
  def hex_salt=(value); end

  # imgproxy hex-encoded signature key
  #
  # @return [String]
  #
  # source://imgproxy//lib/imgproxy/config.rb#74
  def key=(value); end

  # Decoded signature key
  #
  # @return [String]
  #
  # source://imgproxy//lib/imgproxy/config.rb#80
  def raw_key=(value); end

  # Decoded signature salt
  #
  # @return [String]
  #
  # source://imgproxy//lib/imgproxy/config.rb#92
  def raw_salt=(value); end

  # imgproxy hex-encoded signature salt
  #
  # @return [String]
  #
  # source://imgproxy//lib/imgproxy/config.rb#86
  def salt=(value); end

  # URL adapters config. Allows to use this gem with ActiveStorage, Shrine, etc.
  #
  #   Imgproxy.configure do |config|
  #     config.url_adapters.add Imgproxy::UrlAdapters::ActiveStorage.new
  #   end
  #
  #   Imgproxy.url_for(user.avatar)
  #
  # @return [Imgproxy::UrlAdapters]
  # @see Imgproxy::UrlAdapters
  #
  # source://imgproxy//lib/imgproxy/config.rb#120
  def url_adapters; end

  def use_gcs_urls?; end
  def use_s3_urls?; end
  def use_short_options?; end

  private

  # imgproxy hex-encoded signature key
  #
  # @return [String]
  def set_key(val); end

  # Decoded signature key
  #
  # @return [String]
  def set_raw_key(val); end

  # Decoded signature salt
  #
  # @return [String]
  def set_raw_salt(val); end

  # imgproxy hex-encoded signature salt
  #
  # @return [String]
  def set_salt(val); end
end

# source://imgproxy//lib/imgproxy/extensions/active_storage.rb#2
module Imgproxy::Extensions; end

# Extension for ActiveStorage
#
# @see Imgproxy.extend_active_storage!
#
# source://imgproxy//lib/imgproxy/extensions/active_storage.rb#5
module Imgproxy::Extensions::ActiveStorage
  # Returns imgproxy info URL for an attachment
  #
  # @param options [Hash, Imgproxy::Builder]
  # @return [String]
  # @see Imgproxy.info_url_for
  #
  # source://imgproxy//lib/imgproxy/extensions/active_storage.rb#21
  def imgproxy_info_url(options = T.unsafe(nil)); end

  # Returns imgproxy URL for an attachment
  #
  # @param options [Hash, Imgproxy::Builder]
  # @return [String]
  # @see Imgproxy.url_for
  #
  # source://imgproxy//lib/imgproxy/extensions/active_storage.rb#11
  def imgproxy_url(options = T.unsafe(nil)); end
end

# Extension for Shrine::UploadedFile
#
# @see Imgproxy.extend_shrine!
#
# source://imgproxy//lib/imgproxy/extensions/shrine.rb#5
module Imgproxy::Extensions::Shrine
  # Returns imgproxy info URL for a Shrine::UploadedFile instance
  #
  # @param options [Hash, Imgproxy::Builder]
  # @return [String]
  # @see Imgproxy.info_url_for
  #
  # source://imgproxy//lib/imgproxy/extensions/shrine.rb#21
  def imgproxy_info_url(options = T.unsafe(nil)); end

  # Returns imgproxy URL for a Shrine::UploadedFile instance
  #
  # @param options [Hash, Imgproxy::Builder]
  # @return [String]
  # @see Imgproxy.url_for
  #
  # source://imgproxy//lib/imgproxy/extensions/shrine.rb#11
  def imgproxy_url(options = T.unsafe(nil)); end
end

# source://imgproxy//lib/imgproxy/options_aliases.rb#2
Imgproxy::OPTIONS_ALIASES = T.let(T.unsafe(nil), Hash)

# Formats and regroups processing options
#
# source://imgproxy//lib/imgproxy/options.rb#22
class Imgproxy::Options < ::Hash
  # @param options [Hash] raw processing options
  # @return [Options] a new instance of Options
  #
  # source://imgproxy//lib/imgproxy/options.rb#74
  def initialize(options); end

  private

  # source://imgproxy//lib/imgproxy/options.rb#115
  def extract_and_trim_nils(*keys); end

  # source://imgproxy//lib/imgproxy/options.rb#108
  def group_adjust_opts; end

  # source://imgproxy//lib/imgproxy/options.rb#101
  def group_resizing_opts; end

  # source://imgproxy//lib/imgproxy/options.rb#93
  def unwrap_hash(raw); end
end

# source://imgproxy//lib/imgproxy/options.rb#25
Imgproxy::Options::CASTERS = T.let(T.unsafe(nil), Hash)

# source://imgproxy//lib/imgproxy/options.rb#71
Imgproxy::Options::META = T.let(T.unsafe(nil), Array)

# source://imgproxy//lib/imgproxy/options_casters/string.rb#2
module Imgproxy::OptionsCasters; end

# Casts gravity option
#
# source://imgproxy//lib/imgproxy/options_casters/adjust.rb#8
module Imgproxy::OptionsCasters::Adjust
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/adjust.rb#15
    def cast(raw); end
  end
end

# source://imgproxy//lib/imgproxy/options_casters/adjust.rb#9
Imgproxy::OptionsCasters::Adjust::CASTER = T.let(T.unsafe(nil), Imgproxy::OptionsCasters::Group)

# Casts array option
#
# source://imgproxy//lib/imgproxy/options_casters/array.rb#4
module Imgproxy::OptionsCasters::Array
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/array.rb#5
    def cast(raw); end
  end
end

# Casts string option to base64
#
# source://imgproxy//lib/imgproxy/options_casters/base64.rb#6
module Imgproxy::OptionsCasters::Base64
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/base64.rb#7
    def cast(raw); end
  end
end

# Casts boolean option
#
# source://imgproxy//lib/imgproxy/options_casters/bool.rb#4
module Imgproxy::OptionsCasters::Bool
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/bool.rb#5
    def cast(raw); end
  end
end

# Casts crop option
#
# source://imgproxy//lib/imgproxy/options_casters/crop.rb#8
module Imgproxy::OptionsCasters::Crop
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/crop.rb#11
    def cast(raw); end
  end
end

# Casts extend option
#
# source://imgproxy//lib/imgproxy/options_casters/extend.rb#8
module Imgproxy::OptionsCasters::Extend
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/extend.rb#14
    def cast(raw); end
  end
end

# source://imgproxy//lib/imgproxy/options_casters/extend.rb#9
Imgproxy::OptionsCasters::Extend::CASTER = T.let(T.unsafe(nil), Imgproxy::OptionsCasters::Group)

# Casts float option
#
# source://imgproxy//lib/imgproxy/options_casters/float.rb#4
module Imgproxy::OptionsCasters::Float
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/float.rb#7
    def cast(raw); end
  end
end

# source://imgproxy//lib/imgproxy/options_casters/float.rb#5
Imgproxy::OptionsCasters::Float::ZERO_RE = T.let(T.unsafe(nil), Regexp)

# Casts gif_options option
#
# source://imgproxy//lib/imgproxy/options_casters/gif_options.rb#7
module Imgproxy::OptionsCasters::GifOptions
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/gif_options.rb#13
    def cast(raw); end
  end
end

# source://imgproxy//lib/imgproxy/options_casters/gif_options.rb#8
Imgproxy::OptionsCasters::GifOptions::CASTER = T.let(T.unsafe(nil), Imgproxy::OptionsCasters::Group)

# Casts gravity option
#
# source://imgproxy//lib/imgproxy/options_casters/gravity.rb#8
module Imgproxy::OptionsCasters::Gravity
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/gravity.rb#15
    def cast(raw); end
  end
end

# source://imgproxy//lib/imgproxy/options_casters/gravity.rb#9
Imgproxy::OptionsCasters::Gravity::CASTER = T.let(T.unsafe(nil), Imgproxy::OptionsCasters::Group)

# Casts group of options and trim nils from the end
#
# source://imgproxy//lib/imgproxy/options_casters/group.rb#6
class Imgproxy::OptionsCasters::Group
  # @return [Group] a new instance of Group
  #
  # source://imgproxy//lib/imgproxy/options_casters/group.rb#9
  def initialize(extractors); end

  # source://imgproxy//lib/imgproxy/options_casters/group.rb#13
  def cast(raw); end
end

# Casts integer option
#
# source://imgproxy//lib/imgproxy/options_casters/integer.rb#4
module Imgproxy::OptionsCasters::Integer
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/integer.rb#5
    def cast(raw); end
  end
end

# Casts jpeg_options option
#
# source://imgproxy//lib/imgproxy/options_casters/jpeg_options.rb#8
module Imgproxy::OptionsCasters::JpegOptions
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/jpeg_options.rb#18
    def cast(raw); end
  end
end

# source://imgproxy//lib/imgproxy/options_casters/jpeg_options.rb#9
Imgproxy::OptionsCasters::JpegOptions::CASTER = T.let(T.unsafe(nil), Imgproxy::OptionsCasters::Group)

# Casts png_options option
#
# source://imgproxy//lib/imgproxy/options_casters/png_options.rb#8
module Imgproxy::OptionsCasters::PngOptions
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/png_options.rb#15
    def cast(raw); end
  end
end

# source://imgproxy//lib/imgproxy/options_casters/png_options.rb#9
Imgproxy::OptionsCasters::PngOptions::CASTER = T.let(T.unsafe(nil), Imgproxy::OptionsCasters::Group)

# Casts resize option
#
# source://imgproxy//lib/imgproxy/options_casters/resize.rb#8
module Imgproxy::OptionsCasters::Resize
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/resize.rb#11
    def cast(raw); end
  end
end

# Casts size option
#
# source://imgproxy//lib/imgproxy/options_casters/size.rb#9
module Imgproxy::OptionsCasters::Size
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/size.rb#12
    def cast(raw); end
  end
end

# Casts string option
#
# source://imgproxy//lib/imgproxy/options_casters/string.rb#4
module Imgproxy::OptionsCasters::String
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/string.rb#5
    def cast(raw); end
  end
end

# Casts trim option
#
# source://imgproxy//lib/imgproxy/options_casters/trim.rb#9
module Imgproxy::OptionsCasters::Trim
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/trim.rb#17
    def cast(raw); end
  end
end

# source://imgproxy//lib/imgproxy/options_casters/trim.rb#10
Imgproxy::OptionsCasters::Trim::CASTER = T.let(T.unsafe(nil), Imgproxy::OptionsCasters::Group)

# Casts string option
#
# source://imgproxy//lib/imgproxy/options_casters/watermark.rb#9
module Imgproxy::OptionsCasters::Watermark
  class << self
    # source://imgproxy//lib/imgproxy/options_casters/watermark.rb#18
    def cast(raw); end
  end
end

# source://imgproxy//lib/imgproxy/options_casters/watermark.rb#10
Imgproxy::OptionsCasters::Watermark::CASTER = T.let(T.unsafe(nil), Imgproxy::OptionsCasters::Group)

# `Array.trim!` refinement
#
# source://imgproxy//lib/imgproxy/trim_array.rb#3
module Imgproxy::TrimArray; end

# URL adapters config. Allows to use this gem with ActiveStorage, Shrine, etc.
#
#   Imgproxy.configure do |config|
#     config.url_adapters.add Imgproxy::UrlAdapters::ActiveStorage.new
#   end
#
#   Imgproxy.url_for(user.avatar)
#
# source://imgproxy//lib/imgproxy/url_adapters/active_storage.rb#2
class Imgproxy::UrlAdapters
  # @return [UrlAdapters] a new instance of UrlAdapters
  #
  # source://imgproxy//lib/imgproxy/url_adapters.rb#19
  def initialize; end

  # @return [Array] Currently added adapters
  #
  # source://imgproxy//lib/imgproxy/url_adapters.rb#17
  def adapters; end

  # Add adapter to the end of the list
  #
  # @return [Array]
  #
  # source://imgproxy//lib/imgproxy/url_adapters.rb#25
  def add(adapter); end

  # Remove all adapters from the list
  #
  # @return [Array]
  #
  # source://imgproxy//lib/imgproxy/url_adapters.rb#37
  def clear!; end

  # Add adapter to the beginning of the list
  #
  # @return [Array]
  #
  # source://imgproxy//lib/imgproxy/url_adapters.rb#31
  def prepend; end

  # Get URL for the provided image
  #
  # @raise [NotFound]
  # @return [String]
  #
  # source://imgproxy//lib/imgproxy/url_adapters.rb#43
  def url_of(image); end
end

# Adapter for ActiveStorage
#
#   Imgproxy.configure do |config|
#     config.url_adapters.add Imgproxy::UrlAdapters::ActiveStorage.new
#   end
#
#   Imgproxy.url_for(user.avatar)
#
# source://imgproxy//lib/imgproxy/url_adapters/active_storage.rb#10
class Imgproxy::UrlAdapters::ActiveStorage
  # @return [Boolean]
  #
  # source://imgproxy//lib/imgproxy/url_adapters/active_storage.rb#11
  def applicable?(image); end

  # source://imgproxy//lib/imgproxy/url_adapters/active_storage.rb#17
  def url(image); end

  private

  # source://imgproxy//lib/imgproxy/url_adapters/active_storage.rb#52
  def config; end

  # source://imgproxy//lib/imgproxy/url_adapters/active_storage.rb#34
  def gcs_url(image); end

  # source://imgproxy//lib/imgproxy/url_adapters/active_storage.rb#26
  def s3_url(image); end

  # source://imgproxy//lib/imgproxy/url_adapters/active_storage.rb#42
  def service(image); end

  # source://imgproxy//lib/imgproxy/url_adapters/active_storage.rb#46
  def unwrap_service(service); end

  # source://imgproxy//lib/imgproxy/url_adapters/active_storage.rb#38
  def use_gcs_url(image); end

  # source://imgproxy//lib/imgproxy/url_adapters/active_storage.rb#30
  def use_s3_url(image); end
end

# source://imgproxy//lib/imgproxy/url_adapters.rb#14
class Imgproxy::UrlAdapters::NotConfigured < ::StandardError; end

# source://imgproxy//lib/imgproxy/url_adapters.rb#13
class Imgproxy::UrlAdapters::NotFound < ::StandardError; end

# Adapter for Shrine
#
#   Imgproxy.configure do |config|
#     config.url_adapters.add Imgproxy::UrlAdapters::Shrine.new
#   end
#
#   Imgproxy.url_for(user.avatar)
#
# source://imgproxy//lib/imgproxy/url_adapters/shrine.rb#10
class Imgproxy::UrlAdapters::Shrine
  # @return [Boolean]
  #
  # source://imgproxy//lib/imgproxy/url_adapters/shrine.rb#11
  def applicable?(image); end

  # source://imgproxy//lib/imgproxy/url_adapters/shrine.rb#15
  def url(image); end

  private

  # source://imgproxy//lib/imgproxy/url_adapters/shrine.rb#25
  def s3_url(image); end

  # source://imgproxy//lib/imgproxy/url_adapters/shrine.rb#30
  def use_s3_url(image); end
end

# source://imgproxy//lib/imgproxy/version.rb#2
Imgproxy::VERSION = T.let(T.unsafe(nil), String)
